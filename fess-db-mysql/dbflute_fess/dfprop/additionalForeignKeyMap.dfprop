# /---------------------------------------------------------------------------
# additionalForeignKeyMap: (NotRequired - Default map:{})
#
# If foreign key does not exist in your database,
# you can set up here as virtual foreign key for DBFlute.
#
# And it's one-to-one relation if you add one fixed condition to referrer table, 
# you can set virtual foreign key with fixedCondition and fixedSuffix.
# And you can use it to view objects too.
#
# If local column name is same as foreign column name,
# you can omit the setting of localColumnName and foreignColumnName.
# The names are treated as case insensitive.
#
# Example:
# map:{
#     ; FK_MEMBER_MEMBER_STATUS_CODE = map:{
#         ; localTableName  = MEMBER             ; foreignTableName  = MEMBER_STATUS
#         ; localColumnName = MEMBER_STATUS_CODE ; foreignColumnName = MEMBER_STATUS_CODE
#     }
#     ; FK_PURCHASE_MEMBER_ID = map:{
#         ; localTableName  = PURCHASE  ; foreignTableName  = MEMBER
#     }
#     ; FK_MEMBER_MEMBER_ADDRESS_VALID = map:{
#         ; localTableName  = MEMBER    ; foreignTableName  = MEMBER_ADDRESS
#         ; localColumnName = MEMBER_ID ; foreignColumnName = MEMBER_ID
#         ; fixedCondition = 
#          $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null
#      and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null 
#         ; fixedSuffix = AsValid
#     }
# }
#
# *The line that starts with '#' means comment-out.
#
map:{
    #; FK_MEMBER_MEMBER_STATUS_CODE = map:{
    #    ; localTableName  = MEMBER             ; foreignTableName  = MEMBER_STATUS
    #    ; localColumnName = MEMBER_STATUS_CODE ; foreignColumnName = MEMBER_STATUS_CODE
    #}
 ;FK_REQUEST_HEADER_WEB_CRAWLING_CONFIG = map:{ localTableName = REQUEST_HEADER; localColumnName = WEB_CRAWLING_CONFIG_ID; foreignTableName = WEB_CRAWLING_CONFIG; foreignColumnName = ID }
 ;FK_WEB_AUTHENTICATION_WEB_CRAWLING_CONFIG = map:{ localTableName = WEB_AUTHENTICATION; localColumnName = WEB_CRAWLING_CONFIG_ID; foreignTableName = WEB_CRAWLING_CONFIG; foreignColumnName = ID }
 ;FK_CRAWLING_SESSION_INFO_CRAWLING_SESSION = map:{ localTableName = CRAWLING_SESSION_INFO; localColumnName = CRAWLING_SESSION_ID; foreignTableName = CRAWLING_SESSION; foreignColumnName = ID }
 ;FK_FILE_CONFIG_TO_LABEL_TYPE_MAPPING_LABEL_TYPE = map:{ localTableName = FILE_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = LABEL_TYPE_ID; foreignTableName = LABEL_TYPE; foreignColumnName = ID } ;FK_FILE_CONFIG_TO_LABEL_TYPE_MAPPING_FILE_CRAWLING_CONFIG = map:{ localTableName = FILE_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = FILE_CONFIG_ID; foreignTableName = FILE_CRAWLING_CONFIG; foreignColumnName = ID }
 ;FK_WEB_CONFIG_TO_LABEL_TYPE_MAPPING_LABEL_TYPE = map:{ localTableName = WEB_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = LABEL_TYPE_ID; foreignTableName = LABEL_TYPE; foreignColumnName = ID } ;FK_WEB_CONFIG_TO_LABEL_TYPE_MAPPING_WEB_CRAWLING_CONFIG = map:{ localTableName = WEB_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = WEB_CONFIG_ID; foreignTableName = WEB_CRAWLING_CONFIG; foreignColumnName = ID }
 ;FK_FILE_CONFIG_TO_ROLE_TYPE_MAPPING_FILE_CRAWLING_CONFIG = map:{ localTableName = FILE_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = FILE_CONFIG_ID; foreignTableName = FILE_CRAWLING_CONFIG; foreignColumnName = ID } ;FK_FILE_CONFIG_TO_ROLE_TYPE_MAPPING_ROLE_TYPE = map:{ localTableName = FILE_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = ROLE_TYPE_ID; foreignTableName = ROLE_TYPE; foreignColumnName = ID }
 ;FK_WEB_CONFIG_TO_ROLE_TYPE_MAPPING_WEB_CRAWLING_CONFIG = map:{ localTableName = WEB_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = WEB_CONFIG_ID; foreignTableName = WEB_CRAWLING_CONFIG; foreignColumnName = ID } ;FK_WEB_CONFIG_TO_ROLE_TYPE_MAPPING_ROLE_TYPE = map:{ localTableName = WEB_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = ROLE_TYPE_ID; foreignTableName = ROLE_TYPE; foreignColumnName = ID }
 ;FK_DATA_CONFIG_TO_ROLE_TYPE_MAPPING_DATA_CRAWLING_CONFIG = map:{ localTableName = DATA_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = DATA_CONFIG_ID; foreignTableName = DATA_CRAWLING_CONFIG; foreignColumnName = ID } ;FK_DATA_CONFIG_TO_ROLE_TYPE_MAPPING_ROLE_TYPE = map:{ localTableName = DATA_CONFIG_TO_ROLE_TYPE_MAPPING; localColumnName = ROLE_TYPE_ID; foreignTableName = ROLE_TYPE; foreignColumnName = ID }
 ;FK_DATA_CONFIG_TO_LABEL_TYPE_MAPPING_DATA_CRAWLING_CONFIG = map:{ localTableName = DATA_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = DATA_CONFIG_ID; foreignTableName = DATA_CRAWLING_CONFIG; foreignColumnName = ID } ;FK_DATA_CONFIG_TO_LABEL_TYPE_MAPPING_LABEL_TYPE = map:{ localTableName = DATA_CONFIG_TO_LABEL_TYPE_MAPPING; localColumnName = LABEL_TYPE_ID; foreignTableName = LABEL_TYPE; foreignColumnName = ID }
 ;FK_SEARCH_LOG_USER_INFO = map:{ localTableName = SEARCH_LOG; localColumnName = USER_ID; foreignTableName = USER_INFO; foreignColumnName = ID }
 ;FK_LABEL_TYPE_TO_ROLE_TYPE_MAPPING_LABEL_TYPE = map:{ localTableName = LABEL_TYPE_TO_ROLE_TYPE_MAPPING; localColumnName = LABEL_TYPE_ID; foreignTableName = LABEL_TYPE; foreignColumnName = ID } ;FK_LABEL_TYPE_TO_ROLE_TYPE_MAPPING_ROLE_TYPE = map:{ localTableName = LABEL_TYPE_TO_ROLE_TYPE_MAPPING; localColumnName = ROLE_TYPE_ID; foreignTableName = ROLE_TYPE; foreignColumnName = ID }
 ;FK_CLICK_LOG_SEARCH_LOG = map:{ localTableName = CLICK_LOG; localColumnName = SEARCH_ID; foreignTableName = SEARCH_LOG; foreignColumnName = ID }
 ;FK_FILE_AUTHENTICATION_FILE_CRAWLING_CONFIG = map:{ localTableName = FILE_AUTHENTICATION; localColumnName = FILE_CRAWLING_CONFIG_ID; foreignTableName = FILE_CRAWLING_CONFIG; foreignColumnName = ID }
 ;FK_SEARCH_FIELD_LOG_SEARCH_LOG = map:{ localTableName = SEARCH_FIELD_LOG; localColumnName = SEARCH_ID; foreignTableName = SEARCH_LOG; foreignColumnName = ID }
 ;FK_FAVORITE_LOG_USER_INFO = map:{ localTableName = FAVORITE_LOG; localColumnName = USER_ID; foreignTableName = USER_INFO; foreignColumnName = ID }
}
# ----------------/
